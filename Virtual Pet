import tkinter as tk
import random

class VirtualPet:
    def __init__(self):
        self.name = "Pet"
        self.hunger = 50
        self.happiness = 50
        self.health = 100

    def feed(self):
        self.hunger -= 10
        self.happiness += 5

    def play(self):
        self.happiness += 10
        self.hunger += 5

    def visit_doctor(self):
        self.health = 100

    def update(self):
        self.hunger += 5
        self.happiness -= 5
        self.health -= 2

class PetSimulator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Virtual Pet Simulator")
        self.geometry("300x200")

        self.pet = VirtualPet()

        self.info_label = tk.Label(self, text="", padx=10, pady=10)
        self.info_label.pack()

        self.feed_button = tk.Button(self, text="Feed", command=self.feed_pet)
        self.play_button = tk.Button(self, text="Play", command=self.play_with_pet)
        self.doctor_button = tk.Button(self, text="Visit Doctor", command=self.visit_doctor)

        self.feed_button.pack()
        self.play_button.pack()
        self.doctor_button.pack()

        self.update_info()

    def feed_pet(self):
        self.pet.feed()
        self.update_info()

    def play_with_pet(self):
        self.pet.play()
        self.update_info()

    def visit_doctor(self):
        self.pet.visit_doctor()
        self.update_info()

    def update_info(self):
        self.pet.update()
        info = f"Name: {self.pet.name}\nHunger: {self.pet.hunger}\nHappiness: {self.pet.happiness}\nHealth: {self.pet.health}"
        self.info_label.config(text=info)

        if self.pet.hunger >= 100:
            self.info_label.config(text="Your pet is hungry! Please feed it.")
        elif self.pet.health <= 0:
            self.info_label.config(text="Your pet is not feeling well. Visit the doctor.")

        # Add additional conditions and actions as needed for your game.

if __name__ == "__main__":
    app = PetSimulator()
    app.mainloop()
